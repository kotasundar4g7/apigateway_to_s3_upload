# AWS SAM template version
AWSTemplateFormatVersion: '2010-09-09'
# AWS SAM transform version
Transform: AWS::Serverless-2016-10-31
# Resources list 
Resources:
# creating the http api 
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: http_api_call
      StageName: v1 # giving stage name as v1(version 1)
  #creating DynamoDB table with rolename and requesttime as items.  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'api_meta_data'
      AttributeDefinitions:
        - AttributeName: rolename
          AttributeType: S
        - AttributeName: requesttime
          AttributeType: S
      KeySchema:
        - AttributeName: rolename
          KeyType: HASH
        - AttributeName: requesttime
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  # creating the lambda function which will trigger by api gateway and records the meta data to dynamoDB and generate the pre-sigmned URL.
  LambdaFunction1:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'LD_generate_s3_url'
      CodeUri: lambda_function1/lambda_function.py
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: arn:aws:iam::339712708642:role/service-role/apitos3lambda-role-zb2hzzv7
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
          S3_BUCKET: 'demo-dev-classhd'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - S3CrudPolicy:
            BucketName: 'demo-dev-classhd'
      Events:
        Apigateway:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /authenticate
            Method: post  
  # creating the glue crawler to fetch schema of a s3 upload file into glue catalog table.
  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: 'CR_testing_data'
      Role: arn:aws:iam::339712708642:role/demo_glue_role
      DatabaseName: 'test_db'
      Targets:
        S3Targets:
          - Path: 's3://demo-dev-classhd/testing_data'
  # creating a lambda function to start the glue crawler with s3 as event.
  LambdaFunction2:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'LD_crawler_testing_data'
      CodeUri: lambda_function2/lambda_function.py
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: arn:aws:iam::339712708642:role/service-role/apitos3lambda-role-zb2hzzv7
      Environment:
        Variables:
          glue_crawler: !Ref GlueCrawler
